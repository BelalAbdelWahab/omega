#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""Omega: Furtive post-exploitation framework

Omega is a remote control framework, aiming to provide a stealth
interactive shell-like connection over HTTP between client and web server.

It is a post-exploitation tool capable to maintain access to a compromised
web server for privilege escalation purposes.

https://github.com/entynetproject/omega
"""
import sys
import os

os.system("printf '\033]2;Proton Framework\a'")

VERSION = "3.0"

try:
    import src  # spread omega sources

    import random
    import argparse
    import subprocess as sp

    import core
    import ui.input
    import ui.output
    import ui.interface
    from ui.color import colorize
    from datatypes import Path
except KeyboardInterrupt:
    sys.exit("\r[-] Omega initialization interrupted")



def parser_help_formatter(prog):
    """argparser help output formatter"""
    kwargs = dict()
    kwargs['width'] = ui.output.columns()
    kwargs['max_help_position'] = 34
    fmt = argparse.HelpFormatter(prog, **kwargs)
    return fmt

def run_process(cmd: list) -> str:
    """get output of given shell command"""
    child = sp.Popen(cmd, stdout=sp.PIPE, stderr=sp.DEVNULL)
    streamdata = child.communicate()[0]
    if child.returncode != 0:
        return ""
    return streamdata.decode("utf-8").strip()


def rand_message() -> str:
    """return a random funny message"""
    msg_list = Path(src.BASEDIR + "data/messages.lst").readlines()
    return random.choice(msg_list).strip()


def cmdrun(iface, cmdobj, show_err=False) -> int:
    """run a omega command
    handle syntax errors & return command's retcode
    """
    try:
        retval = iface.interpret(cmdobj)
        if retval != 0 and show_err and iface.last_exception:
            iface.interpret("corectl stack-traceback")
    except (SyntaxWarning, SyntaxError) as err:
        retval = iface.onexception(err)
    return retval


# pylint: disable=too-many-branches
def main() -> int:
    """omega's main function
    """
    # Make omega usable as shebang for scripting

    # Enable stdout wrapper
    sys.stdout = ui.output.Wrapper(backlog=True)

    # determine if the interface would run in interactive mode
    interactive = False
    if ui.input.isatty():
        interactive = True

    # make this variable accessible from omega core
    ui.interface.interactive = interactive

    # Start shell interface
    iface = ui.interface.Shell()
        
    if interactive and ui.output.isatty():
        logo = Path(src.BASEDIR + "data/logo.ascii").read()
        cmdrun(iface, "lrun clear")
        print(logo + '\n')

    iface.init()

    retval = 0

    if interactive or not ui.input.isatty():
        iface.cmdloop()

    return retval


if __name__ == "__main__":
    sys.exit(main())
else:
    def check_import():
        """check whether this file is imported for a CI test"""
        launcher = os.path.abspath(__file__)
        test_dir = os.path.join(os.path.dirname(launcher), "test/")
        caller = os.path.abspath(sys.argv[0])
        if not caller.startswith(test_dir):
            sys.exit('[-] Omega must be run from launcher: ' + launcher)
    check_import()
